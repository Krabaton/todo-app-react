{"version":3,"sources":["logo.svg","components/Button/button.js","components/AddTask/AddTask.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","this","props","text","nameClass","handler","Icon","status","className","onClick","disabled","Component","AddTask","state","task","changeTask","event","setState","target","value","addNewTask","addItem","id","generate","title","done","onPressEnter","key","view","setView","change","saveState","primaryClass","secondaryClass","type","onChange","onKeyPress","FcAddDatabase","FcTodoList","FcAlarmClock","FcOk","FaSave","TodoItem","editable","editTitle","setEdit","changeTitle","updateItem","index","checkedItem","deleteItem","classDone","onDoubleClick","onKeyDown","FaRegCheckSquare","FaWindowClose","TodoList","items","map","item","currentTask","localStorage","getItem","App","JSON","parse","trim","newTask","el","filter","setItem","stringify","transformItems","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d383216b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, Fragment } from 'react'\r\nimport './button.css'\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    const { text, nameClass, handler, Icon, status } = this.props\r\n    return (\r\n      <Fragment>\r\n        <button className={nameClass} onClick={handler} disabled={status}>\r\n          <Icon className=\"position\" />\r\n          <span>{text}</span>\r\n        </button>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button\r\n","import React, { Component } from 'react'\r\nimport './AddTask.css'\r\nimport { FaSave } from 'react-icons/fa'\r\nimport { generate } from 'shortid'\r\nimport Button from '../Button/button'\r\nimport { FcAddDatabase, FcTodoList, FcAlarmClock, FcOk } from 'react-icons/fc'\r\n\r\nclass AddTask extends Component {\r\n  state = {\r\n    task: '',\r\n  }\r\n  changeTask = (event) => {\r\n    this.setState({ task: event.target.value })\r\n  }\r\n  addNewTask = () => {\r\n    this.props.addItem({\r\n      id: generate(),\r\n      title: this.state.task,\r\n      done: false,\r\n    })\r\n    this.setState({ task: '' })\r\n  }\r\n  onPressEnter = (event) => {\r\n    if (event.key === 'Enter') {\r\n      this.addNewTask()\r\n    }\r\n  }\r\n  render() {\r\n    const { task } = this.state\r\n    const { view, setView, change, saveState } = this.props\r\n    const primaryClass = 'btn btn-success col-md-auto'\r\n    const secondaryClass = 'btn btn-secondary col-md-auto'\r\n    return (\r\n      <div className=\"mb-3\">\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            value={task}\r\n            onChange={this.changeTask}\r\n            onKeyPress={this.onPressEnter}\r\n          />\r\n\r\n          <Button\r\n            nameClass=\"btn btn-primary\"\r\n            text=\"Добавить\"\r\n            Icon={FcAddDatabase}\r\n            handler={this.addNewTask}></Button>\r\n        </div>\r\n        <div className=\"row justify-content-around align-items-center\">\r\n          <Button\r\n            nameClass={view === 'all' ? primaryClass : secondaryClass}\r\n            status={false}\r\n            text=\"Все задачи\"\r\n            Icon={FcTodoList}\r\n            handler={() => {\r\n              saveState()\r\n              setView('all')\r\n            }}></Button>\r\n          <Button\r\n            className=\"col\"\r\n            nameClass={view === 'active' ? primaryClass : secondaryClass}\r\n            status={false}\r\n            text=\"Активные задачи\"\r\n            Icon={FcAlarmClock}\r\n            handler={() => {\r\n              saveState()\r\n              setView('active')\r\n            }}></Button>\r\n          <Button\r\n            className=\"col\"\r\n            nameClass={view === 'completed' ? primaryClass : secondaryClass}\r\n            status={false}\r\n            text=\"Выполненые задачи\"\r\n            Icon={FcOk}\r\n            handler={() => {\r\n              saveState()\r\n              setView('completed')\r\n            }}></Button>\r\n          <Button\r\n            className=\"col\"\r\n            nameClass={primaryClass}\r\n            status={!change}\r\n            text=\"Сохранить\"\r\n            Icon={FaSave}\r\n            handler={saveState}></Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTask\r\n","import React, { Component, Fragment } from 'react'\r\nimport './TodoItem.css'\r\nimport { FaRegCheckSquare, FaWindowClose } from 'react-icons/fa'\r\nimport Button from '../Button/button'\r\nclass TodoItem extends Component {\r\n  state = { editable: false, editTitle: this.props.title }\r\n  setEdit = () => {\r\n    if (!this.state.editable) {\r\n      this.setState({ editable: true })\r\n    }\r\n  }\r\n  changeTitle = (event) => {\r\n    this.setState({ editTitle: event.target.value })\r\n  }\r\n  onPressEnter = (event) => {\r\n    if (event.key === 'Enter') {\r\n      this.props.updateItem(this.props.id, this.state.editTitle)\r\n      this.setState({ editable: false })\r\n    }\r\n    if (event.key === 'Escape') {\r\n      this.setState({ editable: false })\r\n    }\r\n  }\r\n  render() {\r\n    const { id, title, index, done, checkedItem, deleteItem } = this.props\r\n    const { editable, editTitle } = this.state\r\n    const classDone = done ? 'col-md-8 item-done' : 'col-md-8'\r\n    return (\r\n      <Fragment>\r\n        <div className=\"col-md-1\">{index + 1}</div>\r\n        <div className={classDone} onDoubleClick={this.setEdit}>\r\n          {!editable ? (\r\n            <span>{title}</span>\r\n          ) : (\r\n            <input\r\n              className=\"form-control\"\r\n              value={editTitle}\r\n              onChange={this.changeTitle}\r\n              onKeyDown={this.onPressEnter}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"row justify-content-center align-items-center\">\r\n            <Button\r\n              nameClass=\"btn btn-success col-md-3\"\r\n              status={false}\r\n              text=\"\"\r\n              Icon={FaRegCheckSquare}\r\n              handler={() => checkedItem(id)}></Button>\r\n            <Button\r\n              nameClass=\"btn btn-danger col-md-3\"\r\n              status={false}\r\n              text=\"\"\r\n              Icon={FaWindowClose}\r\n              handler={() => deleteItem(id)}></Button>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react'\r\nimport './TodoList.css'\r\nimport { TodoItem } from '../'\r\n\r\nfunction TodoList({ items, deleteItem, checkedItem, updateItem }) {\r\n  return (\r\n    <ul className=\"row\">\r\n      <li className=\"header row col-md-12\" key={0}>\r\n        <div className=\"col-md-3\">Id</div>\r\n        <div className=\"col-md-6\">Title</div>\r\n        <div className=\"col-md-3\">Operations</div>\r\n      </li>\r\n      {items.map((item, index) => {\r\n        return (\r\n          <li className=\"row col-md-12\" key={item.id}>\r\n            <TodoItem\r\n              title={item.title}\r\n              id={item.id}\r\n              index={index}\r\n              done={item.done}\r\n              deleteItem={deleteItem}\r\n              checkedItem={checkedItem}\r\n              updateItem={updateItem}\r\n            />\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport { AddTask, TodoList } from './components'\nconst currentTask = localStorage.getItem('items')\nclass App extends Component {\n  state = {\n    items: currentTask ? JSON.parse(currentTask) : [],\n    view: 'all', // 'all', 'active', 'completed'\n    change: false,\n  }\n  addItem = (item) => {\n    if (item.title && item.title.trim()) {\n      this.setState({ items: [item, ...this.state.items], change: true })\n    }\n  }\n  updateItem = (id, title) => {\n    const newTask = this.state.items.map((el) => {\n      if (el.id === id) {\n        el.title = title\n      }\n      return el\n    })\n    this.setState({ items: newTask, change: true })\n  }\n  deleteItem = (id) => {\n    this.setState({\n      items: this.state.items.filter((el) => el.id !== id),\n      change: true,\n    })\n  }\n  checkedItem = (id) => {\n    const newTask = this.state.items.map((el) => {\n      if (el.id === id) {\n        el.done = !el.done\n      }\n      return el\n    })\n    this.setState({ items: newTask, change: true })\n  }\n  setView = (view) => {\n    this.setState({ view })\n  }\n  saveState = () => {\n    localStorage.setItem('items', JSON.stringify(this.state.items))\n    this.setState({ change: false })\n  }\n  render() {\n    const { items, view, change } = this.state\n    let transformItems\n    switch (view) {\n      case 'all':\n        transformItems = items\n        break\n      case 'active':\n        transformItems = items.filter((el) => !el.done)\n        break\n      case 'completed':\n        transformItems = items.filter((el) => el.done)\n        break\n      default:\n        transformItems = items\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>TODO APP</p>\n        </header>\n        <div className=\"container\">\n          <AddTask\n            addItem={this.addItem}\n            setView={this.setView}\n            view={view}\n            change={change}\n            saveState={this.saveState}\n          />\n          <TodoList\n            items={transformItems}\n            deleteItem={this.deleteItem}\n            checkedItem={this.checkedItem}\n            updateItem={this.updateItem}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}